version: '3.8'

services:
  api:
    # Берем Dockerfile из каталога app
    build: .
    restart: always
    # Запускаем сервер gunicorn
    command: gunicorn todolist.wsgi:application --bind 0.0.0.0:8000
    # куда будут помещены данные из каталога app
#    volumes:
#      - ./:/usr/src/app/
    # Открываем порт 8000 внутри и снаружи
    ports:
      - 8000:8000
    env_file:
      - ./.env
    environment:
      POSTGRES_HOST: db
    # Дожидаемся запуска контейнера db
    healthcheck:
      test: python3 -c 'import http.client;http.client.HTTPConnection("127.0.0.1:8000", timeout=1).request("GET", "/ping/")'
      interval: 3s
      timeout: 3s
      retries: 5
    networks:
      - backend_nw
      - frontend_nw
    volumes:
      - ./todolist/:/opt/todolist

#  migrations:
#    build:
#      context: .
#    depends_on:
#      - api
#    command: sh -c "python manage.py migrate"

  db:
    # Образ и версия базы, которую мы будем использовать
    image: postgres:12.0-alpine
    # Внешний том(volume) и место где он будет подключен внутри контейнера
    volumes:
      - postgres_volume:/var/lib/postgresql/data/
    environment:
      # Учетные данные, которые можно будет переопределить
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgresdb
    ports:
      - "5432:5432"
    networks:
      - backend_nw


  collect_static:
    build: .
    env_file:
      - ./.env
    entrypoint: ''
    volumes:
      - django_static:/opt/static/
    command: python3 manage.py collectstatic -c --no-input

  front :
    image: sermalenk/skypro-front:lesson-34
    restart: always
    ports:
      - "80:80"
    depends_on:
      api:
        condition: service_healthy
      collect_static:
        condition: service_completed_successfully
    networks:
      - frontend_nw
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      - django_static:/usr/share/nginx/html/static/

volumes:
  postgres_volume:
  django_static:

networks:
  backend_nw:
    driver: bridge
  frontend_nw:
    driver: bridge

#services:
#  web:
#    # Берем Dockerfile из каталога app
#    build:
#      context: .
#      dockerfile: Dockerfile
#    # Запускаем тестовый сервер
#    command: python manage.py runserver 0.0.0.0:8000
#    # куда будут помещены данные из каталога app
#    volumes:
#      - ./app/:/usr/src/app/
#    # Открываем порт 8000 внутри и снаружи
#    ports:
#      - 8000:8000
#    # Файл содержащий переменные для контейнера
#    env_file:
#      - ./.env

#  django_api:
#    build:
#      context: .
#      dockerfile: Dockerfile
#    restart: always
#
#    env_file: .env
#    depends_on:
#      pgdb:
#        condition: service_healthy

#  django:
#    build:
#      context: .
#      dockerfile: Dockerfile
#    command: python manage.py runserver 0.0.0.0:8000
#    volumes:
#      - ./app/:/usr/src/app/
#    ports:
#      - 8000:8000
#    env_file:
#      - ./.env

#    depends_on:
#      - pgdb

#
#  pgdb:
#    image: postgres:13-alpine
#    restart: always
#    container_name: pgdb
#    environment:
#      - POSTGRES_DB=postgresdb
#      - POSTGRES_USER=postgres
#      - POSTGRES_PASSWORD=postgres
#    volumes:
#      - pgdata:/var/lib/postgresql/data/
#    ports:
#      - "5452:5432"
#
#volumes:
#  pgdata:








